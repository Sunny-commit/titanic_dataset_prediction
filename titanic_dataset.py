# -*- coding: utf-8 -*-
"""titanic_dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15tS0Dg4K9piEySfqfgdUtGQl3y6Uie9Y
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

train=pd.read_csv('/content/train.csv')
test=pd.read_csv('/content/test.csv')
train.head()

"""## statistical info"""

train.describe()

"""##datatype info

"""

train.info()

sns.distplot(train['Parch'])

"""## Exploratory data Analysis
# for int data types we use countplot
# for float data type we use distplot
"""

## numerical attributes
sns.countplot(train['Survived'])

sns.countplot(train['Pclass'])

sns.barplot(train['Sex'])

sns.distplot(train['SibSp'])

sns.countplot(train['Embarked'])

sns.distplot(train['Age'])

sns.distplot(train['Fare'])

# Import libraries
import pandas as pd
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load Titanic dataset
df = sns.load_dataset('titanic')

# Display first few rows
print(df.head())

# Drop rows with missing values for simplicity
df = df.dropna(subset=['age', 'embarked', 'fare', 'sex', 'class'])

# Select features and target
X = df[['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked']]
y = df['survived']

# Convert categorical features to numeric using one-hot encoding
X = pd.get_dummies(X, drop_first=True)

# Split into training and testing sets (80/20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Logistic Regression model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

# Evaluate model
print("\nAccuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))